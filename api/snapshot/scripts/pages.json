[{"name":"LevelOrder","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.LevelOrder","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-iterators/-level-order/index.html","searchKeys":["LevelOrder","LevelOrder","com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.LevelOrder"]},{"name":"PostOrder","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.PostOrder","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-iterators/-post-order/index.html","searchKeys":["PostOrder","PostOrder","com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.PostOrder"]},{"name":"PreOrder","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.PreOrder","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-iterators/-pre-order/index.html","searchKeys":["PreOrder","PreOrder","com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.PreOrder"]},{"name":"abstract fun child(value: T, childDeclaration: ChildDeclaration<T>? = null): TreeNode<T>","description":"com.javiersc.kotlin.stdlib.tree.ChildDeclarationInterface.child","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-child-declaration-interface/child.html","searchKeys":["child","abstract fun child(value: T, childDeclaration: ChildDeclaration<T>? = null): TreeNode<T>","com.javiersc.kotlin.stdlib.tree.ChildDeclarationInterface.child"]},{"name":"abstract val missingVertexes: Set<T>","description":"com.javiersc.kotlin.stdlib.graph.Graph.missingVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/missing-vertexes.html","searchKeys":["missingVertexes","abstract val missingVertexes: Set<T>","com.javiersc.kotlin.stdlib.graph.Graph.missingVertexes"]},{"name":"abstract val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/value.html","searchKeys":["value","abstract val value: String","com.javiersc.kotlin.stdlib.AnsiColor.value"]},{"name":"abstract var renderer: Any?.() -> String","description":"com.javiersc.kotlin.stdlib.graph.Graph.renderer","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/renderer.html","searchKeys":["renderer","abstract var renderer: Any?.() -> String","com.javiersc.kotlin.stdlib.graph.Graph.renderer"]},{"name":"annotation class FileScopeMarker","description":"com.javiersc.kotlin.stdlib.FileScopeMarker","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-file-scope-marker/index.html","searchKeys":["FileScopeMarker","annotation class FileScopeMarker","com.javiersc.kotlin.stdlib.FileScopeMarker"]},{"name":"class LevelOrderTreeIterator<T>(root: TreeNode<T>) : Iterator<TreeNode<T>> ","description":"com.javiersc.kotlin.stdlib.tree.LevelOrderTreeIterator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-level-order-tree-iterator/index.html","searchKeys":["LevelOrderTreeIterator","class LevelOrderTreeIterator<T>(root: TreeNode<T>) : Iterator<TreeNode<T>> ","com.javiersc.kotlin.stdlib.tree.LevelOrderTreeIterator"]},{"name":"class MutableGraph<T> : Graph<T> ","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/index.html","searchKeys":["MutableGraph","class MutableGraph<T> : Graph<T> ","com.javiersc.kotlin.stdlib.graph.MutableGraph"]},{"name":"class PostOrderTreeIterator<T>(root: TreeNode<T>) : Iterator<TreeNode<T>> ","description":"com.javiersc.kotlin.stdlib.tree.PostOrderTreeIterator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-post-order-tree-iterator/index.html","searchKeys":["PostOrderTreeIterator","class PostOrderTreeIterator<T>(root: TreeNode<T>) : Iterator<TreeNode<T>> ","com.javiersc.kotlin.stdlib.tree.PostOrderTreeIterator"]},{"name":"class PreOrderTreeIterator<T>(root: TreeNode<T>) : Iterator<TreeNode<T>> ","description":"com.javiersc.kotlin.stdlib.tree.PreOrderTreeIterator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-pre-order-tree-iterator/index.html","searchKeys":["PreOrderTreeIterator","class PreOrderTreeIterator<T>(root: TreeNode<T>) : Iterator<TreeNode<T>> ","com.javiersc.kotlin.stdlib.tree.PreOrderTreeIterator"]},{"name":"class TreeNodeException constructor(message: String? = null, cause: Throwable? = null) : RuntimeException","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeException","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-exception/index.html","searchKeys":["TreeNodeException","class TreeNodeException constructor(message: String? = null, cause: Throwable? = null) : RuntimeException","com.javiersc.kotlin.stdlib.tree.TreeNodeException"]},{"name":"class ValidatableList<T>(val values: List<T>) : List<T> ","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.ValidatableList","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/-validatable-list/index.html","searchKeys":["ValidatableList","class ValidatableList<T>(val values: List<T>) : List<T> ","com.javiersc.kotlin.stdlib.validate.ValidatorScope.ValidatableList"]},{"name":"class Validator<V : Any>","description":"com.javiersc.kotlin.stdlib.validate.Validator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator/index.html","searchKeys":["Validator","class Validator<V : Any>","com.javiersc.kotlin.stdlib.validate.Validator"]},{"name":"class ValidatorScope<V : Any>","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/index.html","searchKeys":["ValidatorScope","class ValidatorScope<V : Any>","com.javiersc.kotlin.stdlib.validate.ValidatorScope"]},{"name":"constructor(file: File)","description":"com.javiersc.kotlin.stdlib.DirScope.DirScope","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-dir-scope/-dir-scope.html","searchKeys":["DirScope","constructor(file: File)","com.javiersc.kotlin.stdlib.DirScope.DirScope"]},{"name":"constructor(file: File)","description":"com.javiersc.kotlin.stdlib.FileScope.FileScope","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-file-scope/-file-scope.html","searchKeys":["FileScope","constructor(file: File)","com.javiersc.kotlin.stdlib.FileScope.FileScope"]},{"name":"constructor(index: Int, value: T)","description":"com.javiersc.kotlin.stdlib.graph.Graph.Vertex.Vertex","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-vertex/-vertex.html","searchKeys":["Vertex","constructor(index: Int, value: T)","com.javiersc.kotlin.stdlib.graph.Graph.Vertex.Vertex"]},{"name":"constructor(message: String? = null, cause: Throwable? = null)","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeException.TreeNodeException","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-exception/-tree-node-exception.html","searchKeys":["TreeNodeException","constructor(message: String? = null, cause: Throwable? = null)","com.javiersc.kotlin.stdlib.tree.TreeNodeException.TreeNodeException"]},{"name":"constructor(root: TreeNode<T>)","description":"com.javiersc.kotlin.stdlib.tree.LevelOrderTreeIterator.LevelOrderTreeIterator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-level-order-tree-iterator/-level-order-tree-iterator.html","searchKeys":["LevelOrderTreeIterator","constructor(root: TreeNode<T>)","com.javiersc.kotlin.stdlib.tree.LevelOrderTreeIterator.LevelOrderTreeIterator"]},{"name":"constructor(root: TreeNode<T>)","description":"com.javiersc.kotlin.stdlib.tree.PostOrderTreeIterator.PostOrderTreeIterator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-post-order-tree-iterator/-post-order-tree-iterator.html","searchKeys":["PostOrderTreeIterator","constructor(root: TreeNode<T>)","com.javiersc.kotlin.stdlib.tree.PostOrderTreeIterator.PostOrderTreeIterator"]},{"name":"constructor(root: TreeNode<T>)","description":"com.javiersc.kotlin.stdlib.tree.PreOrderTreeIterator.PreOrderTreeIterator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-pre-order-tree-iterator/-pre-order-tree-iterator.html","searchKeys":["PreOrderTreeIterator","constructor(root: TreeNode<T>)","com.javiersc.kotlin.stdlib.tree.PreOrderTreeIterator.PreOrderTreeIterator"]},{"name":"constructor(source: Graph.Vertex<T>, destination: Graph.Vertex<T>)","description":"com.javiersc.kotlin.stdlib.graph.Graph.Edge.Edge","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-edge/-edge.html","searchKeys":["Edge","constructor(source: Graph.Vertex<T>, destination: Graph.Vertex<T>)","com.javiersc.kotlin.stdlib.graph.Graph.Edge.Edge"]},{"name":"constructor(source: Pair<Int, T>, destination: Pair<Int, T>)","description":"com.javiersc.kotlin.stdlib.graph.Graph.Edge.Edge","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-edge/-edge.html","searchKeys":["Edge","constructor(source: Pair<Int, T>, destination: Pair<Int, T>)","com.javiersc.kotlin.stdlib.graph.Graph.Edge.Edge"]},{"name":"constructor(value: A)","description":"com.javiersc.kotlin.stdlib.Either.Left.Left","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-left/-left.html","searchKeys":["Left","constructor(value: A)","com.javiersc.kotlin.stdlib.Either.Left.Left"]},{"name":"constructor(value: B)","description":"com.javiersc.kotlin.stdlib.Either.Right.Right","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-right/-right.html","searchKeys":["Right","constructor(value: B)","com.javiersc.kotlin.stdlib.Either.Right.Right"]},{"name":"constructor(value: T)","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.TreeNode","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/-tree-node.html","searchKeys":["TreeNode","constructor(value: T)","com.javiersc.kotlin.stdlib.tree.TreeNode.TreeNode"]},{"name":"constructor(values: List<T>)","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.ValidatableList.ValidatableList","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/-validatable-list/-validatable-list.html","searchKeys":["ValidatableList","constructor(values: List<T>)","com.javiersc.kotlin.stdlib.validate.ValidatorScope.ValidatableList.ValidatableList"]},{"name":"data class Edge<T>(val source: Graph.Vertex<T>, val destination: Graph.Vertex<T>)","description":"com.javiersc.kotlin.stdlib.graph.Graph.Edge","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-edge/index.html","searchKeys":["Edge","data class Edge<T>(val source: Graph.Vertex<T>, val destination: Graph.Vertex<T>)","com.javiersc.kotlin.stdlib.graph.Graph.Edge"]},{"name":"data class Left<out A>(val value: A) : Either<A, Nothing> ","description":"com.javiersc.kotlin.stdlib.Either.Left","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-left/index.html","searchKeys":["Left","data class Left<out A>(val value: A) : Either<A, Nothing> ","com.javiersc.kotlin.stdlib.Either.Left"]},{"name":"data class Right<out B>(val value: B) : Either<Nothing, B> ","description":"com.javiersc.kotlin.stdlib.Either.Right","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-right/index.html","searchKeys":["Right","data class Right<out B>(val value: B) : Either<Nothing, B> ","com.javiersc.kotlin.stdlib.Either.Right"]},{"name":"data class Vertex<T>(val index: Int, val value: T)","description":"com.javiersc.kotlin.stdlib.graph.Graph.Vertex","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-vertex/index.html","searchKeys":["Vertex","data class Vertex<T>(val index: Int, val value: T)","com.javiersc.kotlin.stdlib.graph.Graph.Vertex"]},{"name":"enum TreeNodeIterators : Enum<TreeNodeIterators> ","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeIterators","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-iterators/index.html","searchKeys":["TreeNodeIterators","enum TreeNodeIterators : Enum<TreeNodeIterators> ","com.javiersc.kotlin.stdlib.tree.TreeNodeIterators"]},{"name":"fun <A, B, C> Either<A, B>.handleErrorWith(f: (A) -> Either<C, B>): Either<C, B>","description":"com.javiersc.kotlin.stdlib.handleErrorWith","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/handle-error-with.html","searchKeys":["handleErrorWith","fun <A, B, C> Either<A, B>.handleErrorWith(f: (A) -> Either<C, B>): Either<C, B>","com.javiersc.kotlin.stdlib.handleErrorWith"]},{"name":"fun <A, B> Either<A, B>.combine(other: Either<A, B>, combineLeft: (A, A) -> A, combineRight: (B, B) -> B): Either<A, B>","description":"com.javiersc.kotlin.stdlib.combine","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/combine.html","searchKeys":["combine","fun <A, B> Either<A, B>.combine(other: Either<A, B>, combineLeft: (A, A) -> A, combineRight: (B, B) -> B): Either<A, B>","com.javiersc.kotlin.stdlib.combine"]},{"name":"fun <A, B> Either<A, Either<A, B>>.flatten(): Either<A, B>","description":"com.javiersc.kotlin.stdlib.flatten","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/flatten.html","searchKeys":["flatten","fun <A, B> Either<A, Either<A, B>>.flatten(): Either<A, B>","com.javiersc.kotlin.stdlib.flatten"]},{"name":"fun <A> A.left(): Either<A, Nothing>","description":"com.javiersc.kotlin.stdlib.left","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/left.html","searchKeys":["left","fun <A> A.left(): Either<A, Nothing>","com.javiersc.kotlin.stdlib.left"]},{"name":"fun <A> A.right(): Either<Nothing, A>","description":"com.javiersc.kotlin.stdlib.right","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/right.html","searchKeys":["right","fun <A> A.right(): Either<Nothing, A>","com.javiersc.kotlin.stdlib.right"]},{"name":"fun <A> Either<A, A>.merge(): A","description":"com.javiersc.kotlin.stdlib.merge","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/merge.html","searchKeys":["merge","fun <A> Either<A, A>.merge(): A","com.javiersc.kotlin.stdlib.merge"]},{"name":"fun <E, A> Either<E, A>.toEitherNel(): EitherNel<E, A>","description":"com.javiersc.kotlin.stdlib.toEitherNel","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/to-either-nel.html","searchKeys":["toEitherNel","fun <E, A> Either<E, A>.toEitherNel(): EitherNel<E, A>","com.javiersc.kotlin.stdlib.toEitherNel"]},{"name":"fun <E> E.leftNel(): EitherNel<E, Nothing>","description":"com.javiersc.kotlin.stdlib.leftNel","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/left-nel.html","searchKeys":["leftNel","fun <E> E.leftNel(): EitherNel<E, Nothing>","com.javiersc.kotlin.stdlib.leftNel"]},{"name":"fun <T> buildGraph(builderAction: MutableGraph<T>.() -> Unit = {}): Graph<T>","description":"com.javiersc.kotlin.stdlib.graph.buildGraph","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/build-graph.html","searchKeys":["buildGraph","fun <T> buildGraph(builderAction: MutableGraph<T>.() -> Unit = {}): Graph<T>","com.javiersc.kotlin.stdlib.graph.buildGraph"]},{"name":"fun <T> mutableGraphOf(builderAction: MutableGraph<T>.() -> Unit = {}): MutableGraph<T>","description":"com.javiersc.kotlin.stdlib.graph.mutableGraphOf","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/mutable-graph-of.html","searchKeys":["mutableGraphOf","fun <T> mutableGraphOf(builderAction: MutableGraph<T>.() -> Unit = {}): MutableGraph<T>","com.javiersc.kotlin.stdlib.graph.mutableGraphOf"]},{"name":"fun <T> validationOf(vararg values: T, block: T.() -> Unit)","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.validationOf","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/validation-of.html","searchKeys":["validationOf","fun <T> validationOf(vararg values: T, block: T.() -> Unit)","com.javiersc.kotlin.stdlib.validate.ValidatorScope.validationOf"]},{"name":"fun CharSequence.endWithNewLine(): CharSequence","description":"com.javiersc.kotlin.stdlib.endWithNewLine","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/end-with-new-line.html","searchKeys":["endWithNewLine","fun CharSequence.endWithNewLine(): CharSequence","com.javiersc.kotlin.stdlib.endWithNewLine"]},{"name":"fun CharSequence.removeDuplicateEmptyLines(): CharSequence","description":"com.javiersc.kotlin.stdlib.removeDuplicateEmptyLines","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/remove-duplicate-empty-lines.html","searchKeys":["removeDuplicateEmptyLines","fun CharSequence.removeDuplicateEmptyLines(): CharSequence","com.javiersc.kotlin.stdlib.removeDuplicateEmptyLines"]},{"name":"fun File.root(name: String, block: DirScope.() -> Unit = {}): DirScope","description":"com.javiersc.kotlin.stdlib.root","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/root.html","searchKeys":["root","fun File.root(name: String, block: DirScope.() -> Unit = {}): DirScope","com.javiersc.kotlin.stdlib.root"]},{"name":"fun List<String>.removeDuplicateEmptyLines(): String","description":"com.javiersc.kotlin.stdlib.removeDuplicateEmptyLines","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/remove-duplicate-empty-lines.html","searchKeys":["removeDuplicateEmptyLines","fun List<String>.removeDuplicateEmptyLines(): String","com.javiersc.kotlin.stdlib.removeDuplicateEmptyLines"]},{"name":"fun String.TRANSFORMSTRING(): String","description":"com.javiersc.kotlin.stdlib.TRANSFORMSTRING","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-t-r-a-n-s-f-o-r-m-s-t-r-i-n-g.html","searchKeys":["TRANSFORMSTRING","fun String.TRANSFORMSTRING(): String","com.javiersc.kotlin.stdlib.TRANSFORMSTRING"]},{"name":"fun String.TRANSFORM_HYPHEN_STRING(): String","description":"com.javiersc.kotlin.stdlib.TRANSFORM_HYPHEN_STRING","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-t-r-a-n-s-f-o-r-m_-h-y-p-h-e-n_-s-t-r-i-n-g.html","searchKeys":["TRANSFORM_HYPHEN_STRING","fun String.TRANSFORM_HYPHEN_STRING(): String","com.javiersc.kotlin.stdlib.TRANSFORM_HYPHEN_STRING"]},{"name":"fun String.TRANSFORM_STRING(): String","description":"com.javiersc.kotlin.stdlib.TRANSFORM_STRING","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-t-r-a-n-s-f-o-r-m_-s-t-r-i-n-g.html","searchKeys":["TRANSFORM_STRING","fun String.TRANSFORM_STRING(): String","com.javiersc.kotlin.stdlib.TRANSFORM_STRING"]},{"name":"fun String.TransformString(): String","description":"com.javiersc.kotlin.stdlib.TransformString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-transform-string.html","searchKeys":["TransformString","fun String.TransformString(): String","com.javiersc.kotlin.stdlib.TransformString"]},{"name":"fun String.invalidIfIsEmpty(otherwise: () -> String = { EmptyProperty })","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.invalidIfIsEmpty","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/invalid-if-is-empty.html","searchKeys":["invalidIfIsEmpty","fun String.invalidIfIsEmpty(otherwise: () -> String = { EmptyProperty })","com.javiersc.kotlin.stdlib.validate.ValidatorScope.invalidIfIsEmpty"]},{"name":"fun String.remove(vararg values: String, ignoreCase: Boolean = false): String","description":"com.javiersc.kotlin.stdlib.remove","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/remove.html","searchKeys":["remove","fun String.remove(vararg values: String, ignoreCase: Boolean = false): String","com.javiersc.kotlin.stdlib.remove"]},{"name":"fun String.removeIf(value: String, ignoreCase: Boolean = false, block: (String) -> Boolean): String","description":"com.javiersc.kotlin.stdlib.removeIf","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/remove-if.html","searchKeys":["removeIf","fun String.removeIf(value: String, ignoreCase: Boolean = false, block: (String) -> Boolean): String","com.javiersc.kotlin.stdlib.removeIf"]},{"name":"fun String.replace(vararg oldToNewValues: Pair<String, String>): String","description":"com.javiersc.kotlin.stdlib.replace","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/replace.html","searchKeys":["replace","fun String.replace(vararg oldToNewValues: Pair<String, String>): String","com.javiersc.kotlin.stdlib.replace"]},{"name":"fun String.tRaNsFoRmStRiNg(): String","description":"com.javiersc.kotlin.stdlib.tRaNsFoRmStRiNg","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/t-ra-ns-fo-rm-st-ri-ng.html","searchKeys":["tRaNsFoRmStRiNg","fun String.tRaNsFoRmStRiNg(): String","com.javiersc.kotlin.stdlib.tRaNsFoRmStRiNg"]},{"name":"fun String.transformString(): String","description":"com.javiersc.kotlin.stdlib.transformString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/transform-string.html","searchKeys":["transformString","fun String.transformString(): String","com.javiersc.kotlin.stdlib.transformString"]},{"name":"fun String.transform_hyphen_string(): String","description":"com.javiersc.kotlin.stdlib.transform_hyphen_string","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/transform_hyphen_string.html","searchKeys":["transform_hyphen_string","fun String.transform_hyphen_string(): String","com.javiersc.kotlin.stdlib.transform_hyphen_string"]},{"name":"fun String.transform_string(): String","description":"com.javiersc.kotlin.stdlib.transform_string","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/transform_string.html","searchKeys":["transform_string","fun String.transform_string(): String","com.javiersc.kotlin.stdlib.transform_string"]},{"name":"fun String.transformstring(): String","description":"com.javiersc.kotlin.stdlib.transformstring","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/transformstring.html","searchKeys":["transformstring","fun String.transformstring(): String","com.javiersc.kotlin.stdlib.transformstring"]},{"name":"fun addChild(child: TreeNode<T>)","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.addChild","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/add-child.html","searchKeys":["addChild","fun addChild(child: TreeNode<T>)","com.javiersc.kotlin.stdlib.tree.TreeNode.addChild"]},{"name":"fun addEdge(source: T, destination: T)","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.addEdge","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/add-edge.html","searchKeys":["addEdge","fun addEdge(source: T, destination: T)","com.javiersc.kotlin.stdlib.graph.MutableGraph.addEdge"]},{"name":"fun addVertex(data: T): T","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.addVertex","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/add-vertex.html","searchKeys":["addVertex","fun addVertex(data: T): T","com.javiersc.kotlin.stdlib.graph.MutableGraph.addVertex"]},{"name":"fun clear()","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.clear","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/clear.html","searchKeys":["clear","fun clear()","com.javiersc.kotlin.stdlib.tree.TreeNode.clear"]},{"name":"fun dir(name: String, block: DirScope.() -> Unit = {}): DirScope","description":"com.javiersc.kotlin.stdlib.DirScope.dir","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-dir-scope/dir.html","searchKeys":["dir","fun dir(name: String, block: DirScope.() -> Unit = {}): DirScope","com.javiersc.kotlin.stdlib.DirScope.dir"]},{"name":"fun file(name: String, block: FileScope.() -> Unit = {}): FileScope","description":"com.javiersc.kotlin.stdlib.FileScope.file","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-file-scope/file.html","searchKeys":["file","fun file(name: String, block: FileScope.() -> Unit = {}): FileScope","com.javiersc.kotlin.stdlib.FileScope.file"]},{"name":"fun getOrNull(): B?","description":"com.javiersc.kotlin.stdlib.Either.getOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/get-or-null.html","searchKeys":["getOrNull","fun getOrNull(): B?","com.javiersc.kotlin.stdlib.Either.getOrNull"]},{"name":"fun invalid(predicate: () -> Boolean, otherwise: () -> String)","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.invalid","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/invalid.html","searchKeys":["invalid","fun invalid(predicate: () -> Boolean, otherwise: () -> String)","com.javiersc.kotlin.stdlib.validate.ValidatorScope.invalid"]},{"name":"fun invalidIf(predicate: () -> Boolean)","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.invalidIf","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/invalid-if.html","searchKeys":["invalidIf","fun invalidIf(predicate: () -> Boolean)","com.javiersc.kotlin.stdlib.validate.ValidatorScope.invalidIf"]},{"name":"fun isLeft(): Boolean","description":"com.javiersc.kotlin.stdlib.Either.isLeft","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/is-left.html","searchKeys":["isLeft","fun isLeft(): Boolean","com.javiersc.kotlin.stdlib.Either.isLeft"]},{"name":"fun isRight(): Boolean","description":"com.javiersc.kotlin.stdlib.Either.isRight","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/is-right.html","searchKeys":["isRight","fun isRight(): Boolean","com.javiersc.kotlin.stdlib.Either.isRight"]},{"name":"fun leftOrNull(): A?","description":"com.javiersc.kotlin.stdlib.Either.leftOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/left-or-null.html","searchKeys":["leftOrNull","fun leftOrNull(): A?","com.javiersc.kotlin.stdlib.Either.leftOrNull"]},{"name":"fun path(descendant: TreeNode<T>): List<TreeNode<T>>","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.path","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/path.html","searchKeys":["path","fun path(descendant: TreeNode<T>): List<TreeNode<T>>","com.javiersc.kotlin.stdlib.tree.TreeNode.path"]},{"name":"fun prettyString(): String","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.prettyString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/pretty-string.html","searchKeys":["prettyString","fun prettyString(): String","com.javiersc.kotlin.stdlib.tree.TreeNode.prettyString"]},{"name":"fun removeChild(child: TreeNode<T>): Boolean","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.removeChild","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/remove-child.html","searchKeys":["removeChild","fun removeChild(child: TreeNode<T>): Boolean","com.javiersc.kotlin.stdlib.tree.TreeNode.removeChild"]},{"name":"fun resource(name: String): File","description":"com.javiersc.kotlin.stdlib.resource","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/resource.html","searchKeys":["resource","fun resource(name: String): File","com.javiersc.kotlin.stdlib.resource"]},{"name":"fun resourceOrNull(name: String): File?","description":"com.javiersc.kotlin.stdlib.resourceOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/resource-or-null.html","searchKeys":["resourceOrNull","fun resourceOrNull(name: String): File?","com.javiersc.kotlin.stdlib.resourceOrNull"]},{"name":"fun swap(): Either<B, A>","description":"com.javiersc.kotlin.stdlib.Either.swap","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/swap.html","searchKeys":["swap","fun swap(): Either<B, A>","com.javiersc.kotlin.stdlib.Either.swap"]},{"name":"fun valid(predicate: () -> Boolean, otherwise: () -> String)","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.valid","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/valid.html","searchKeys":["valid","fun valid(predicate: () -> Boolean, otherwise: () -> String)","com.javiersc.kotlin.stdlib.validate.ValidatorScope.valid"]},{"name":"fun validIf(predicate: () -> Boolean)","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.validIf","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/valid-if.html","searchKeys":["validIf","fun validIf(predicate: () -> Boolean)","com.javiersc.kotlin.stdlib.validate.ValidatorScope.validIf"]},{"name":"fun valueOf(value: String): TreeNodeIterators","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.valueOf","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-iterators/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): TreeNodeIterators","com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.valueOf"]},{"name":"fun values(): Array<TreeNodeIterators>","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.values","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-iterators/values.html","searchKeys":["values","fun values(): Array<TreeNodeIterators>","com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.values"]},{"name":"infix fun <T> T.and(value: T): ValidatorScope.ValidatableList<T>","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.and","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/and.html","searchKeys":["and","infix fun <T> T.and(value: T): ValidatorScope.ValidatableList<T>","com.javiersc.kotlin.stdlib.validate.ValidatorScope.and"]},{"name":"infix fun <T> ValidatorScope.ValidatableList<T>.and(value: T): ValidatorScope.ValidatableList<T>","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.and","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/and.html","searchKeys":["and","infix fun <T> ValidatorScope.ValidatableList<T>.and(value: T): ValidatorScope.ValidatableList<T>","com.javiersc.kotlin.stdlib.validate.ValidatorScope.and"]},{"name":"infix inline fun <A, B> Either<A, B>.getOrElse(default: (A) -> B): B","description":"com.javiersc.kotlin.stdlib.getOrElse","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/get-or-else.html","searchKeys":["getOrElse","infix inline fun <A, B> Either<A, B>.getOrElse(default: (A) -> B): B","com.javiersc.kotlin.stdlib.getOrElse"]},{"name":"infix inline fun <T> T?.or(block: () -> T): T","description":"com.javiersc.kotlin.stdlib.or","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/or.html","searchKeys":["or","infix inline fun <T> T?.or(block: () -> T): T","com.javiersc.kotlin.stdlib.or"]},{"name":"infix inline fun <T> T?.or(other: T): T","description":"com.javiersc.kotlin.stdlib.or","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/or.html","searchKeys":["or","infix inline fun <T> T?.or(other: T): T","com.javiersc.kotlin.stdlib.or"]},{"name":"inline fun <A : V> validate(value: A): Either<String, A>","description":"com.javiersc.kotlin.stdlib.validate.Validator.validate","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator/validate.html","searchKeys":["validate","inline fun <A : V> validate(value: A): Either<String, A>","com.javiersc.kotlin.stdlib.validate.Validator.validate"]},{"name":"inline fun <A, B, C> Either<A, B>.flatMap(f: (right: B) -> Either<A, C>): Either<A, C>","description":"com.javiersc.kotlin.stdlib.flatMap","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/flat-map.html","searchKeys":["flatMap","inline fun <A, B, C> Either<A, B>.flatMap(f: (right: B) -> Either<A, C>): Either<A, C>","com.javiersc.kotlin.stdlib.flatMap"]},{"name":"inline fun <A> identity(a: A): A","description":"com.javiersc.kotlin.stdlib.identity","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/identity.html","searchKeys":["identity","inline fun <A> identity(a: A): A","com.javiersc.kotlin.stdlib.identity"]},{"name":"inline fun <C> fold(ifLeft: (left: A) -> C, ifRight: (right: B) -> C): C","description":"com.javiersc.kotlin.stdlib.Either.fold","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/fold.html","searchKeys":["fold","inline fun <C> fold(ifLeft: (left: A) -> C, ifRight: (right: B) -> C): C","com.javiersc.kotlin.stdlib.Either.fold"]},{"name":"inline fun <C> map(f: (right: B) -> C): Either<A, C>","description":"com.javiersc.kotlin.stdlib.Either.map","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/map.html","searchKeys":["map","inline fun <C> map(f: (right: B) -> C): Either<A, C>","com.javiersc.kotlin.stdlib.Either.map"]},{"name":"inline fun <C> mapLeft(f: (A) -> C): Either<C, B>","description":"com.javiersc.kotlin.stdlib.Either.mapLeft","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/map-left.html","searchKeys":["mapLeft","inline fun <C> mapLeft(f: (A) -> C): Either<C, B>","com.javiersc.kotlin.stdlib.Either.mapLeft"]},{"name":"inline fun <T : Any> T.validateWith(validator: Validator<T>): Either<String, T>","description":"com.javiersc.kotlin.stdlib.validate.validateWith","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/validate-with.html","searchKeys":["validateWith","inline fun <T : Any> T.validateWith(validator: Validator<T>): Either<String, T>","com.javiersc.kotlin.stdlib.validate.validateWith"]},{"name":"inline fun <T> Iterable<T>.eighth(): T","description":"com.javiersc.kotlin.stdlib.eighth","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/eighth.html","searchKeys":["eighth","inline fun <T> Iterable<T>.eighth(): T","com.javiersc.kotlin.stdlib.eighth"]},{"name":"inline fun <T> Iterable<T>.eighthOrNull(): T?","description":"com.javiersc.kotlin.stdlib.eighthOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/eighth-or-null.html","searchKeys":["eighthOrNull","inline fun <T> Iterable<T>.eighthOrNull(): T?","com.javiersc.kotlin.stdlib.eighthOrNull"]},{"name":"inline fun <T> Iterable<T>.fifth(): T","description":"com.javiersc.kotlin.stdlib.fifth","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/fifth.html","searchKeys":["fifth","inline fun <T> Iterable<T>.fifth(): T","com.javiersc.kotlin.stdlib.fifth"]},{"name":"inline fun <T> Iterable<T>.fifthOrNull(): T?","description":"com.javiersc.kotlin.stdlib.fifthOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/fifth-or-null.html","searchKeys":["fifthOrNull","inline fun <T> Iterable<T>.fifthOrNull(): T?","com.javiersc.kotlin.stdlib.fifthOrNull"]},{"name":"inline fun <T> Iterable<T>.forth(): T","description":"com.javiersc.kotlin.stdlib.forth","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/forth.html","searchKeys":["forth","inline fun <T> Iterable<T>.forth(): T","com.javiersc.kotlin.stdlib.forth"]},{"name":"inline fun <T> Iterable<T>.forthOrNull(): T?","description":"com.javiersc.kotlin.stdlib.forthOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/forth-or-null.html","searchKeys":["forthOrNull","inline fun <T> Iterable<T>.forthOrNull(): T?","com.javiersc.kotlin.stdlib.forthOrNull"]},{"name":"inline fun <T> Iterable<T>.ninth(): T","description":"com.javiersc.kotlin.stdlib.ninth","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/ninth.html","searchKeys":["ninth","inline fun <T> Iterable<T>.ninth(): T","com.javiersc.kotlin.stdlib.ninth"]},{"name":"inline fun <T> Iterable<T>.ninthOrNull(): T?","description":"com.javiersc.kotlin.stdlib.ninthOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/ninth-or-null.html","searchKeys":["ninthOrNull","inline fun <T> Iterable<T>.ninthOrNull(): T?","com.javiersc.kotlin.stdlib.ninthOrNull"]},{"name":"inline fun <T> Iterable<T>.penultimate(): T","description":"com.javiersc.kotlin.stdlib.penultimate","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/penultimate.html","searchKeys":["penultimate","inline fun <T> Iterable<T>.penultimate(): T","com.javiersc.kotlin.stdlib.penultimate"]},{"name":"inline fun <T> Iterable<T>.penultimateOrNull(): T?","description":"com.javiersc.kotlin.stdlib.penultimateOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/penultimate-or-null.html","searchKeys":["penultimateOrNull","inline fun <T> Iterable<T>.penultimateOrNull(): T?","com.javiersc.kotlin.stdlib.penultimateOrNull"]},{"name":"inline fun <T> Iterable<T>.second(): T","description":"com.javiersc.kotlin.stdlib.second","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/second.html","searchKeys":["second","inline fun <T> Iterable<T>.second(): T","com.javiersc.kotlin.stdlib.second"]},{"name":"inline fun <T> Iterable<T>.secondOrNull(): T?","description":"com.javiersc.kotlin.stdlib.secondOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/second-or-null.html","searchKeys":["secondOrNull","inline fun <T> Iterable<T>.secondOrNull(): T?","com.javiersc.kotlin.stdlib.secondOrNull"]},{"name":"inline fun <T> Iterable<T>.seventh(): T","description":"com.javiersc.kotlin.stdlib.seventh","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/seventh.html","searchKeys":["seventh","inline fun <T> Iterable<T>.seventh(): T","com.javiersc.kotlin.stdlib.seventh"]},{"name":"inline fun <T> Iterable<T>.seventhOrNull(): T?","description":"com.javiersc.kotlin.stdlib.seventhOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/seventh-or-null.html","searchKeys":["seventhOrNull","inline fun <T> Iterable<T>.seventhOrNull(): T?","com.javiersc.kotlin.stdlib.seventhOrNull"]},{"name":"inline fun <T> Iterable<T>.sixth(): T","description":"com.javiersc.kotlin.stdlib.sixth","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/sixth.html","searchKeys":["sixth","inline fun <T> Iterable<T>.sixth(): T","com.javiersc.kotlin.stdlib.sixth"]},{"name":"inline fun <T> Iterable<T>.sixthOrNull(): T?","description":"com.javiersc.kotlin.stdlib.sixthOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/sixth-or-null.html","searchKeys":["sixthOrNull","inline fun <T> Iterable<T>.sixthOrNull(): T?","com.javiersc.kotlin.stdlib.sixthOrNull"]},{"name":"inline fun <T> Iterable<T>.tenth(): T","description":"com.javiersc.kotlin.stdlib.tenth","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/tenth.html","searchKeys":["tenth","inline fun <T> Iterable<T>.tenth(): T","com.javiersc.kotlin.stdlib.tenth"]},{"name":"inline fun <T> Iterable<T>.tenthOrNull(): T?","description":"com.javiersc.kotlin.stdlib.tenthOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/tenth-or-null.html","searchKeys":["tenthOrNull","inline fun <T> Iterable<T>.tenthOrNull(): T?","com.javiersc.kotlin.stdlib.tenthOrNull"]},{"name":"inline fun <T> Iterable<T>.third(): T","description":"com.javiersc.kotlin.stdlib.third","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/third.html","searchKeys":["third","inline fun <T> Iterable<T>.third(): T","com.javiersc.kotlin.stdlib.third"]},{"name":"inline fun <T> Iterable<T>.thirdOrNull(): T?","description":"com.javiersc.kotlin.stdlib.thirdOrNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/third-or-null.html","searchKeys":["thirdOrNull","inline fun <T> Iterable<T>.thirdOrNull(): T?","com.javiersc.kotlin.stdlib.thirdOrNull"]},{"name":"inline fun <T> T?.ifNotNull(block: () -> Unit): T?","description":"com.javiersc.kotlin.stdlib.ifNotNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/if-not-null.html","searchKeys":["ifNotNull","inline fun <T> T?.ifNotNull(block: () -> Unit): T?","com.javiersc.kotlin.stdlib.ifNotNull"]},{"name":"inline fun <T> T?.ifNull(block: () -> Unit): T?","description":"com.javiersc.kotlin.stdlib.ifNull","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/if-null.html","searchKeys":["ifNull","inline fun <T> T?.ifNull(block: () -> Unit): T?","com.javiersc.kotlin.stdlib.ifNull"]},{"name":"inline fun <T> tree(root: T, defaultIterator: TreeNodeIterators = TreeNodeIterators.PreOrder, childDeclaration: ChildDeclaration<T>): TreeNode<T>","description":"com.javiersc.kotlin.stdlib.tree.tree","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/tree.html","searchKeys":["tree","inline fun <T> tree(root: T, defaultIterator: TreeNodeIterators = TreeNodeIterators.PreOrder, childDeclaration: ChildDeclaration<T>): TreeNode<T>","com.javiersc.kotlin.stdlib.tree.tree"]},{"name":"inline fun Boolean.ifFalse(block: () -> Unit): Boolean","description":"com.javiersc.kotlin.stdlib.ifFalse","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/if-false.html","searchKeys":["ifFalse","inline fun Boolean.ifFalse(block: () -> Unit): Boolean","com.javiersc.kotlin.stdlib.ifFalse"]},{"name":"inline fun Boolean.ifTrue(block: () -> Unit): Boolean","description":"com.javiersc.kotlin.stdlib.ifTrue","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/if-true.html","searchKeys":["ifTrue","inline fun Boolean.ifTrue(block: () -> Unit): Boolean","com.javiersc.kotlin.stdlib.ifTrue"]},{"name":"inline fun CharSequence.notContain(other: CharSequence, ignoreCase: Boolean = false): Boolean","description":"com.javiersc.kotlin.stdlib.notContain","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/not-contain.html","searchKeys":["notContain","inline fun CharSequence.notContain(other: CharSequence, ignoreCase: Boolean = false): Boolean","com.javiersc.kotlin.stdlib.notContain"]},{"name":"inline fun CharSequence.notContain(regex: Regex): Boolean","description":"com.javiersc.kotlin.stdlib.notContain","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/not-contain.html","searchKeys":["notContain","inline fun CharSequence.notContain(regex: Regex): Boolean","com.javiersc.kotlin.stdlib.notContain"]},{"name":"inline fun CharSequence?.isNotNullNorBlank(): Boolean","description":"com.javiersc.kotlin.stdlib.isNotNullNorBlank","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/is-not-null-nor-blank.html","searchKeys":["isNotNullNorBlank","inline fun CharSequence?.isNotNullNorBlank(): Boolean","com.javiersc.kotlin.stdlib.isNotNullNorBlank"]},{"name":"inline fun CharSequence?.isNotNullNorEmpty(): Boolean","description":"com.javiersc.kotlin.stdlib.isNotNullNorEmpty","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/is-not-null-nor-empty.html","searchKeys":["isNotNullNorEmpty","inline fun CharSequence?.isNotNullNorEmpty(): Boolean","com.javiersc.kotlin.stdlib.isNotNullNorEmpty"]},{"name":"inline fun String.ansiColor(color: AnsiColor): String","description":"com.javiersc.kotlin.stdlib.ansiColor","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/ansi-color.html","searchKeys":["ansiColor","inline fun String.ansiColor(color: AnsiColor): String","com.javiersc.kotlin.stdlib.ansiColor"]},{"name":"inline fun String.capitalize(): String","description":"com.javiersc.kotlin.stdlib.capitalize","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/capitalize.html","searchKeys":["capitalize","inline fun String.capitalize(): String","com.javiersc.kotlin.stdlib.capitalize"]},{"name":"inline fun String.decapitalize(): String","description":"com.javiersc.kotlin.stdlib.decapitalize","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/decapitalize.html","searchKeys":["decapitalize","inline fun String.decapitalize(): String","com.javiersc.kotlin.stdlib.decapitalize"]},{"name":"inline fun String.remove(value: String, ignoreCase: Boolean = false): String","description":"com.javiersc.kotlin.stdlib.remove","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/remove.html","searchKeys":["remove","inline fun String.remove(value: String, ignoreCase: Boolean = false): String","com.javiersc.kotlin.stdlib.remove"]},{"name":"inline fun isLeft(predicate: (A) -> Boolean): Boolean","description":"com.javiersc.kotlin.stdlib.Either.isLeft","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/is-left.html","searchKeys":["isLeft","inline fun isLeft(predicate: (A) -> Boolean): Boolean","com.javiersc.kotlin.stdlib.Either.isLeft"]},{"name":"inline fun isRight(predicate: (B) -> Boolean): Boolean","description":"com.javiersc.kotlin.stdlib.Either.isRight","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/is-right.html","searchKeys":["isRight","inline fun isRight(predicate: (B) -> Boolean): Boolean","com.javiersc.kotlin.stdlib.Either.isRight"]},{"name":"inline fun onLeft(action: (left: A) -> Unit): Either<A, B>","description":"com.javiersc.kotlin.stdlib.Either.onLeft","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/on-left.html","searchKeys":["onLeft","inline fun onLeft(action: (left: A) -> Unit): Either<A, B>","com.javiersc.kotlin.stdlib.Either.onLeft"]},{"name":"inline fun onRight(action: (right: B) -> Unit): Either<A, B>","description":"com.javiersc.kotlin.stdlib.Either.onRight","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/on-right.html","searchKeys":["onRight","inline fun onRight(action: (right: B) -> Unit): Either<A, B>","com.javiersc.kotlin.stdlib.Either.onRight"]},{"name":"inline operator fun <T : Any> invoke(name: String = T::class.simpleName ?: \"Validator\", noinline block: ValidatorScope<T>.(T) -> Unit): Lazy<Validator<T>>","description":"com.javiersc.kotlin.stdlib.validate.Validator.Companion.invoke","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator/-companion/invoke.html","searchKeys":["invoke","inline operator fun <T : Any> invoke(name: String = T::class.simpleName ?: \"Validator\", noinline block: ValidatorScope<T>.(T) -> Unit): Lazy<Validator<T>>","com.javiersc.kotlin.stdlib.validate.Validator.Companion.invoke"]},{"name":"interface ChildDeclarationInterface<T>","description":"com.javiersc.kotlin.stdlib.tree.ChildDeclarationInterface","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-child-declaration-interface/index.html","searchKeys":["ChildDeclarationInterface","interface ChildDeclarationInterface<T>","com.javiersc.kotlin.stdlib.tree.ChildDeclarationInterface"]},{"name":"interface Graph<T> : Map<Graph.Vertex<T>, List<Graph.Edge<T>>> ","description":"com.javiersc.kotlin.stdlib.graph.Graph","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/index.html","searchKeys":["Graph","interface Graph<T> : Map<Graph.Vertex<T>, List<Graph.Edge<T>>> ","com.javiersc.kotlin.stdlib.graph.Graph"]},{"name":"object Black : AnsiColor.Background","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Black","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-black/index.html","searchKeys":["Black","object Black : AnsiColor.Background","com.javiersc.kotlin.stdlib.AnsiColor.Background.Black"]},{"name":"object Black : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Black","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-black/index.html","searchKeys":["Black","object Black : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Black"]},{"name":"object Blue : AnsiColor.Background","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Blue","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-blue/index.html","searchKeys":["Blue","object Blue : AnsiColor.Background","com.javiersc.kotlin.stdlib.AnsiColor.Background.Blue"]},{"name":"object Blue : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Blue","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-blue/index.html","searchKeys":["Blue","object Blue : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Blue"]},{"name":"object BrightBlack : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightBlack","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-black/index.html","searchKeys":["BrightBlack","object BrightBlack : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightBlack"]},{"name":"object BrightBlue : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightBlue","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-blue/index.html","searchKeys":["BrightBlue","object BrightBlue : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightBlue"]},{"name":"object BrightCyan : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightCyan","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-cyan/index.html","searchKeys":["BrightCyan","object BrightCyan : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightCyan"]},{"name":"object BrightGreen : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightGreen","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-green/index.html","searchKeys":["BrightGreen","object BrightGreen : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightGreen"]},{"name":"object BrightPurple : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightPurple","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-purple/index.html","searchKeys":["BrightPurple","object BrightPurple : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightPurple"]},{"name":"object BrightRed : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightRed","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-red/index.html","searchKeys":["BrightRed","object BrightRed : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightRed"]},{"name":"object BrightWhite : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightWhite","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-white/index.html","searchKeys":["BrightWhite","object BrightWhite : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightWhite"]},{"name":"object BrightYellow : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightYellow","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-yellow/index.html","searchKeys":["BrightYellow","object BrightYellow : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightYellow"]},{"name":"object Companion","description":"com.javiersc.kotlin.stdlib.Either.Left.Companion","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-left/-companion/index.html","searchKeys":["Companion","object Companion","com.javiersc.kotlin.stdlib.Either.Left.Companion"]},{"name":"object Companion","description":"com.javiersc.kotlin.stdlib.Either.Right.Companion","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-right/-companion/index.html","searchKeys":["Companion","object Companion","com.javiersc.kotlin.stdlib.Either.Right.Companion"]},{"name":"object Companion","description":"com.javiersc.kotlin.stdlib.validate.Validator.Companion","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator/-companion/index.html","searchKeys":["Companion","object Companion","com.javiersc.kotlin.stdlib.validate.Validator.Companion"]},{"name":"object Cyan : AnsiColor.Background","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Cyan","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-cyan/index.html","searchKeys":["Cyan","object Cyan : AnsiColor.Background","com.javiersc.kotlin.stdlib.AnsiColor.Background.Cyan"]},{"name":"object Cyan : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Cyan","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-cyan/index.html","searchKeys":["Cyan","object Cyan : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Cyan"]},{"name":"object Gray : AnsiColor.Background","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Gray","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-gray/index.html","searchKeys":["Gray","object Gray : AnsiColor.Background","com.javiersc.kotlin.stdlib.AnsiColor.Background.Gray"]},{"name":"object Green : AnsiColor.Background","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Green","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-green/index.html","searchKeys":["Green","object Green : AnsiColor.Background","com.javiersc.kotlin.stdlib.AnsiColor.Background.Green"]},{"name":"object Green : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Green","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-green/index.html","searchKeys":["Green","object Green : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Green"]},{"name":"object Purple : AnsiColor.Background","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Purple","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-purple/index.html","searchKeys":["Purple","object Purple : AnsiColor.Background","com.javiersc.kotlin.stdlib.AnsiColor.Background.Purple"]},{"name":"object Purple : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Purple","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-purple/index.html","searchKeys":["Purple","object Purple : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Purple"]},{"name":"object Red : AnsiColor.Background","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Red","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-red/index.html","searchKeys":["Red","object Red : AnsiColor.Background","com.javiersc.kotlin.stdlib.AnsiColor.Background.Red"]},{"name":"object Red : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Red","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-red/index.html","searchKeys":["Red","object Red : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Red"]},{"name":"object Reset : AnsiColor","description":"com.javiersc.kotlin.stdlib.AnsiColor.Reset","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-reset/index.html","searchKeys":["Reset","object Reset : AnsiColor","com.javiersc.kotlin.stdlib.AnsiColor.Reset"]},{"name":"object White : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.White","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-white/index.html","searchKeys":["White","object White : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.White"]},{"name":"object Yellow : AnsiColor.Background","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Yellow","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-yellow/index.html","searchKeys":["Yellow","object Yellow : AnsiColor.Background","com.javiersc.kotlin.stdlib.AnsiColor.Background.Yellow"]},{"name":"object Yellow : AnsiColor.Foreground","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Yellow","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-yellow/index.html","searchKeys":["Yellow","object Yellow : AnsiColor.Foreground","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Yellow"]},{"name":"open class DirScope(file: File) : FileScope","description":"com.javiersc.kotlin.stdlib.DirScope","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-dir-scope/index.html","searchKeys":["DirScope","open class DirScope(file: File) : FileScope","com.javiersc.kotlin.stdlib.DirScope"]},{"name":"open class FileScope(file: File) : File","description":"com.javiersc.kotlin.stdlib.FileScope","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-file-scope/index.html","searchKeys":["FileScope","open class FileScope(file: File) : File","com.javiersc.kotlin.stdlib.FileScope"]},{"name":"open class TreeNode<T>(val value: T) : Iterable<TreeNode<T>> , ChildDeclarationInterface<T> ","description":"com.javiersc.kotlin.stdlib.tree.TreeNode","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/index.html","searchKeys":["TreeNode","open class TreeNode<T>(val value: T) : Iterable<TreeNode<T>> , ChildDeclarationInterface<T> ","com.javiersc.kotlin.stdlib.tree.TreeNode"]},{"name":"open fun asString(): String","description":"com.javiersc.kotlin.stdlib.graph.Graph.asString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/as-string.html","searchKeys":["asString","open fun asString(): String","com.javiersc.kotlin.stdlib.graph.Graph.asString"]},{"name":"open fun contains(value: T): Boolean","description":"com.javiersc.kotlin.stdlib.graph.Graph.contains","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/contains.html","searchKeys":["contains","open fun contains(value: T): Boolean","com.javiersc.kotlin.stdlib.graph.Graph.contains"]},{"name":"open fun contains(value: T, predicate: (T) -> Boolean): Boolean","description":"com.javiersc.kotlin.stdlib.graph.Graph.contains","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/contains.html","searchKeys":["contains","open fun contains(value: T, predicate: (T) -> Boolean): Boolean","com.javiersc.kotlin.stdlib.graph.Graph.contains"]},{"name":"open fun containsCircularVertexes(value: T): Boolean","description":"com.javiersc.kotlin.stdlib.graph.Graph.containsCircularVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/contains-circular-vertexes.html","searchKeys":["containsCircularVertexes","open fun containsCircularVertexes(value: T): Boolean","com.javiersc.kotlin.stdlib.graph.Graph.containsCircularVertexes"]},{"name":"open fun doesNotContainsCircularVertexes(value: T): Boolean","description":"com.javiersc.kotlin.stdlib.graph.Graph.doesNotContainsCircularVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/does-not-contains-circular-vertexes.html","searchKeys":["doesNotContainsCircularVertexes","open fun doesNotContainsCircularVertexes(value: T): Boolean","com.javiersc.kotlin.stdlib.graph.Graph.doesNotContainsCircularVertexes"]},{"name":"open fun renderer(block: Any?.() -> String)","description":"com.javiersc.kotlin.stdlib.graph.Graph.renderer","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/renderer.html","searchKeys":["renderer","open fun renderer(block: Any?.() -> String)","com.javiersc.kotlin.stdlib.graph.Graph.renderer"]},{"name":"open fun toGraphSortedByEdges(): Graph<T>","description":"com.javiersc.kotlin.stdlib.graph.Graph.toGraphSortedByEdges","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/to-graph-sorted-by-edges.html","searchKeys":["toGraphSortedByEdges","open fun toGraphSortedByEdges(): Graph<T>","com.javiersc.kotlin.stdlib.graph.Graph.toGraphSortedByEdges"]},{"name":"open fun vertexesFor(value: T, predicate: (T) -> Boolean = { it == value }): List<T>","description":"com.javiersc.kotlin.stdlib.graph.Graph.vertexesFor","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/vertexes-for.html","searchKeys":["vertexesFor","open fun vertexesFor(value: T, predicate: (T) -> Boolean = { it == value }): List<T>","com.javiersc.kotlin.stdlib.graph.Graph.vertexesFor"]},{"name":"open fun vertexesFor(vararg values: T): List<T>","description":"com.javiersc.kotlin.stdlib.graph.Graph.vertexesFor","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/vertexes-for.html","searchKeys":["vertexesFor","open fun vertexesFor(vararg values: T): List<T>","com.javiersc.kotlin.stdlib.graph.Graph.vertexesFor"]},{"name":"open operator override fun get(key: Graph.Vertex<T>): List<Graph.Edge<T>>?","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.get","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/get.html","searchKeys":["get","open operator override fun get(key: Graph.Vertex<T>): List<Graph.Edge<T>>?","com.javiersc.kotlin.stdlib.graph.MutableGraph.get"]},{"name":"open operator override fun hasNext(): Boolean","description":"com.javiersc.kotlin.stdlib.tree.LevelOrderTreeIterator.hasNext","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-level-order-tree-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","com.javiersc.kotlin.stdlib.tree.LevelOrderTreeIterator.hasNext"]},{"name":"open operator override fun hasNext(): Boolean","description":"com.javiersc.kotlin.stdlib.tree.PostOrderTreeIterator.hasNext","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-post-order-tree-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","com.javiersc.kotlin.stdlib.tree.PostOrderTreeIterator.hasNext"]},{"name":"open operator override fun hasNext(): Boolean","description":"com.javiersc.kotlin.stdlib.tree.PreOrderTreeIterator.hasNext","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-pre-order-tree-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","com.javiersc.kotlin.stdlib.tree.PreOrderTreeIterator.hasNext"]},{"name":"open operator override fun iterator(): Iterator<TreeNode<T>>","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.iterator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<TreeNode<T>>","com.javiersc.kotlin.stdlib.tree.TreeNode.iterator"]},{"name":"open operator override fun next(): TreeNode<T>","description":"com.javiersc.kotlin.stdlib.tree.LevelOrderTreeIterator.next","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-level-order-tree-iterator/next.html","searchKeys":["next","open operator override fun next(): TreeNode<T>","com.javiersc.kotlin.stdlib.tree.LevelOrderTreeIterator.next"]},{"name":"open operator override fun next(): TreeNode<T>","description":"com.javiersc.kotlin.stdlib.tree.PostOrderTreeIterator.next","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-post-order-tree-iterator/next.html","searchKeys":["next","open operator override fun next(): TreeNode<T>","com.javiersc.kotlin.stdlib.tree.PostOrderTreeIterator.next"]},{"name":"open operator override fun next(): TreeNode<T>","description":"com.javiersc.kotlin.stdlib.tree.PreOrderTreeIterator.next","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-pre-order-tree-iterator/next.html","searchKeys":["next","open operator override fun next(): TreeNode<T>","com.javiersc.kotlin.stdlib.tree.PreOrderTreeIterator.next"]},{"name":"open override fun child(value: T, childDeclaration: ChildDeclaration<T>?): TreeNode<T>","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.child","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/child.html","searchKeys":["child","open override fun child(value: T, childDeclaration: ChildDeclaration<T>?): TreeNode<T>","com.javiersc.kotlin.stdlib.tree.TreeNode.child"]},{"name":"open override fun containsKey(key: Graph.Vertex<T>): Boolean","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.containsKey","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/contains-key.html","searchKeys":["containsKey","open override fun containsKey(key: Graph.Vertex<T>): Boolean","com.javiersc.kotlin.stdlib.graph.MutableGraph.containsKey"]},{"name":"open override fun containsValue(value: List<Graph.Edge<T>>): Boolean","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.containsValue","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/contains-value.html","searchKeys":["containsValue","open override fun containsValue(value: List<Graph.Edge<T>>): Boolean","com.javiersc.kotlin.stdlib.graph.MutableGraph.containsValue"]},{"name":"open override fun isEmpty(): Boolean","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.isEmpty","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","com.javiersc.kotlin.stdlib.graph.MutableGraph.isEmpty"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.stdlib.AnsiColor.toString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.stdlib.AnsiColor.toString"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.stdlib.Either.Left.toString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-left/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.stdlib.Either.Left.toString"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.stdlib.Either.Right.toString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-right/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.stdlib.Either.Right.toString"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.stdlib.Either.toString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.stdlib.Either.toString"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.stdlib.graph.Graph.Edge.toString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-edge/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.stdlib.graph.Graph.Edge.toString"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.stdlib.graph.Graph.Vertex.toString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-vertex/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.stdlib.graph.Graph.Vertex.toString"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.toString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.stdlib.graph.MutableGraph.toString"]},{"name":"open override fun toString(): String","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.toString","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/to-string.html","searchKeys":["toString","open override fun toString(): String","com.javiersc.kotlin.stdlib.tree.TreeNode.toString"]},{"name":"open override val entries: Set<Map.Entry<Graph.Vertex<T>, List<Graph.Edge<T>>>>","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.entries","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/entries.html","searchKeys":["entries","open override val entries: Set<Map.Entry<Graph.Vertex<T>, List<Graph.Edge<T>>>>","com.javiersc.kotlin.stdlib.graph.MutableGraph.entries"]},{"name":"open override val keys: Set<Graph.Vertex<T>>","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.keys","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/keys.html","searchKeys":["keys","open override val keys: Set<Graph.Vertex<T>>","com.javiersc.kotlin.stdlib.graph.MutableGraph.keys"]},{"name":"open override val missingVertexes: Set<T>","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.missingVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/missing-vertexes.html","searchKeys":["missingVertexes","open override val missingVertexes: Set<T>","com.javiersc.kotlin.stdlib.graph.MutableGraph.missingVertexes"]},{"name":"open override val size: Int","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.size","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/size.html","searchKeys":["size","open override val size: Int","com.javiersc.kotlin.stdlib.graph.MutableGraph.size"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Black.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-black/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Background.Black.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Blue.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-blue/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Background.Blue.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Cyan.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-cyan/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Background.Cyan.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Gray.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-gray/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Background.Gray.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Green.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-green/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Background.Green.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Purple.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-purple/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Background.Purple.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Red.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-red/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Background.Red.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background.Yellow.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/-yellow/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Background.Yellow.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Black.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-black/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Black.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Blue.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-blue/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Blue.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightBlack.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-black/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightBlack.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightBlue.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-blue/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightBlue.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightCyan.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-cyan/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightCyan.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightGreen.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-green/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightGreen.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightPurple.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-purple/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightPurple.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightRed.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-red/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightRed.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightWhite.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-white/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightWhite.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightYellow.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-bright-yellow/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.BrightYellow.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Cyan.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-cyan/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Cyan.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Green.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-green/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Green.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Purple.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-purple/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Purple.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Red.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-red/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Red.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.White.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-white/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.White.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Yellow.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/-yellow/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Foreground.Yellow.value"]},{"name":"open override val value: String","description":"com.javiersc.kotlin.stdlib.AnsiColor.Reset.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-reset/value.html","searchKeys":["value","open override val value: String","com.javiersc.kotlin.stdlib.AnsiColor.Reset.value"]},{"name":"open override val values: Collection<List<Graph.Edge<T>>>","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.values","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/values.html","searchKeys":["values","open override val values: Collection<List<Graph.Edge<T>>>","com.javiersc.kotlin.stdlib.graph.MutableGraph.values"]},{"name":"open override var renderer: Any?.() -> String","description":"com.javiersc.kotlin.stdlib.graph.MutableGraph.renderer","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-mutable-graph/renderer.html","searchKeys":["renderer","open override var renderer: Any?.() -> String","com.javiersc.kotlin.stdlib.graph.MutableGraph.renderer"]},{"name":"open val circularVertexes: Map<T, List<Graph.Edge<T>>>","description":"com.javiersc.kotlin.stdlib.graph.Graph.circularVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/circular-vertexes.html","searchKeys":["circularVertexes","open val circularVertexes: Map<T, List<Graph.Edge<T>>>","com.javiersc.kotlin.stdlib.graph.Graph.circularVertexes"]},{"name":"open val duplicatedVertexes: Map<T, Int>","description":"com.javiersc.kotlin.stdlib.graph.Graph.duplicatedVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/duplicated-vertexes.html","searchKeys":["duplicatedVertexes","open val duplicatedVertexes: Map<T, Int>","com.javiersc.kotlin.stdlib.graph.Graph.duplicatedVertexes"]},{"name":"open val hasCircularVertexes: Boolean","description":"com.javiersc.kotlin.stdlib.graph.Graph.hasCircularVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/has-circular-vertexes.html","searchKeys":["hasCircularVertexes","open val hasCircularVertexes: Boolean","com.javiersc.kotlin.stdlib.graph.Graph.hasCircularVertexes"]},{"name":"open val hasDuplicatedVertexes: Boolean","description":"com.javiersc.kotlin.stdlib.graph.Graph.hasDuplicatedVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/has-duplicated-vertexes.html","searchKeys":["hasDuplicatedVertexes","open val hasDuplicatedVertexes: Boolean","com.javiersc.kotlin.stdlib.graph.Graph.hasDuplicatedVertexes"]},{"name":"open val hasMissingVertexes: Boolean","description":"com.javiersc.kotlin.stdlib.graph.Graph.hasMissingVertexes","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/has-missing-vertexes.html","searchKeys":["hasMissingVertexes","open val hasMissingVertexes: Boolean","com.javiersc.kotlin.stdlib.graph.Graph.hasMissingVertexes"]},{"name":"operator fun <A : Comparable<A>, B : Comparable<B>> Either<A, B>.compareTo(other: Either<A, B>): Int","description":"com.javiersc.kotlin.stdlib.compareTo","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/compare-to.html","searchKeys":["compareTo","operator fun <A : Comparable<A>, B : Comparable<B>> Either<A, B>.compareTo(other: Either<A, B>): Int","com.javiersc.kotlin.stdlib.compareTo"]},{"name":"operator fun <T> T.invoke(block: T.() -> Unit): T","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.invoke","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/invoke.html","searchKeys":["invoke","operator fun <T> T.invoke(block: T.() -> Unit): T","com.javiersc.kotlin.stdlib.validate.ValidatorScope.invoke"]},{"name":"operator fun invoke(block: T.() -> Unit)","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.ValidatableList.invoke","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/-validatable-list/invoke.html","searchKeys":["invoke","operator fun invoke(block: T.() -> Unit)","com.javiersc.kotlin.stdlib.validate.ValidatorScope.ValidatableList.invoke"]},{"name":"sealed class AnsiColor","description":"com.javiersc.kotlin.stdlib.AnsiColor","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/index.html","searchKeys":["AnsiColor","sealed class AnsiColor","com.javiersc.kotlin.stdlib.AnsiColor"]},{"name":"sealed class Background : AnsiColor","description":"com.javiersc.kotlin.stdlib.AnsiColor.Background","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-background/index.html","searchKeys":["Background","sealed class Background : AnsiColor","com.javiersc.kotlin.stdlib.AnsiColor.Background"]},{"name":"sealed class Either<out A, out B>","description":"com.javiersc.kotlin.stdlib.Either","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/index.html","searchKeys":["Either","sealed class Either<out A, out B>","com.javiersc.kotlin.stdlib.Either"]},{"name":"sealed class Foreground : AnsiColor","description":"com.javiersc.kotlin.stdlib.AnsiColor.Foreground","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-ansi-color/-foreground/index.html","searchKeys":["Foreground","sealed class Foreground : AnsiColor","com.javiersc.kotlin.stdlib.AnsiColor.Foreground"]},{"name":"typealias ChildDeclaration<T> = ChildDeclarationInterface<T>.() -> Unit","description":"com.javiersc.kotlin.stdlib.tree.ChildDeclaration","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-child-declaration/index.html","searchKeys":["ChildDeclaration","typealias ChildDeclaration<T> = ChildDeclarationInterface<T>.() -> Unit","com.javiersc.kotlin.stdlib.tree.ChildDeclaration"]},{"name":"typealias EitherNel<E, A> = Either<List<E>, A>","description":"com.javiersc.kotlin.stdlib.EitherNel","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either-nel/index.html","searchKeys":["EitherNel","typealias EitherNel<E, A> = Either<List<E>, A>","com.javiersc.kotlin.stdlib.EitherNel"]},{"name":"val File.children: Sequence<File>","description":"com.javiersc.kotlin.stdlib.children","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/children.html","searchKeys":["children","val File.children: Sequence<File>","com.javiersc.kotlin.stdlib.children"]},{"name":"val String.Companion.Empty: String","description":"com.javiersc.kotlin.stdlib.Empty","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-empty.html","searchKeys":["Empty","val String.Companion.Empty: String","com.javiersc.kotlin.stdlib.Empty"]},{"name":"val children: List<TreeNode<T>>","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.children","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/children.html","searchKeys":["children","val children: List<TreeNode<T>>","com.javiersc.kotlin.stdlib.tree.TreeNode.children"]},{"name":"val depth: Int","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.depth","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/depth.html","searchKeys":["depth","val depth: Int","com.javiersc.kotlin.stdlib.tree.TreeNode.depth"]},{"name":"val destination: Graph.Vertex<T>","description":"com.javiersc.kotlin.stdlib.graph.Graph.Edge.destination","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-edge/destination.html","searchKeys":["destination","val destination: Graph.Vertex<T>","com.javiersc.kotlin.stdlib.graph.Graph.Edge.destination"]},{"name":"val entries: EnumEntries<TreeNodeIterators>","description":"com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.entries","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node-iterators/entries.html","searchKeys":["entries","val entries: EnumEntries<TreeNodeIterators>","com.javiersc.kotlin.stdlib.tree.TreeNodeIterators.entries"]},{"name":"val height: Int","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.height","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/height.html","searchKeys":["height","val height: Int","com.javiersc.kotlin.stdlib.tree.TreeNode.height"]},{"name":"val index: Int","description":"com.javiersc.kotlin.stdlib.graph.Graph.Vertex.index","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-vertex/--index--.html","searchKeys":["index","val index: Int","com.javiersc.kotlin.stdlib.graph.Graph.Vertex.index"]},{"name":"val isRoot: Boolean","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.isRoot","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/is-root.html","searchKeys":["isRoot","val isRoot: Boolean","com.javiersc.kotlin.stdlib.tree.TreeNode.isRoot"]},{"name":"val nodeCount: Int","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.nodeCount","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/node-count.html","searchKeys":["nodeCount","val nodeCount: Int","com.javiersc.kotlin.stdlib.tree.TreeNode.nodeCount"]},{"name":"val parent: TreeNode<T>?","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.parent","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/parent.html","searchKeys":["parent","val parent: TreeNode<T>?","com.javiersc.kotlin.stdlib.tree.TreeNode.parent"]},{"name":"val root: TreeNode<T>","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.root","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/root.html","searchKeys":["root","val root: TreeNode<T>","com.javiersc.kotlin.stdlib.tree.TreeNode.root"]},{"name":"val source: Graph.Vertex<T>","description":"com.javiersc.kotlin.stdlib.graph.Graph.Edge.source","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-edge/source.html","searchKeys":["source","val source: Graph.Vertex<T>","com.javiersc.kotlin.stdlib.graph.Graph.Edge.source"]},{"name":"val value: A","description":"com.javiersc.kotlin.stdlib.Either.Left.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-left/value.html","searchKeys":["value","val value: A","com.javiersc.kotlin.stdlib.Either.Left.value"]},{"name":"val value: B","description":"com.javiersc.kotlin.stdlib.Either.Right.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib/-either/-right/value.html","searchKeys":["value","val value: B","com.javiersc.kotlin.stdlib.Either.Right.value"]},{"name":"val value: T","description":"com.javiersc.kotlin.stdlib.graph.Graph.Vertex.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.graph/-graph/-vertex/value.html","searchKeys":["value","val value: T","com.javiersc.kotlin.stdlib.graph.Graph.Vertex.value"]},{"name":"val value: T","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.value","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/value.html","searchKeys":["value","val value: T","com.javiersc.kotlin.stdlib.tree.TreeNode.value"]},{"name":"val values: List<T>","description":"com.javiersc.kotlin.stdlib.validate.ValidatorScope.ValidatableList.values","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.validate/-validator-scope/-validatable-list/values.html","searchKeys":["values","val values: List<T>","com.javiersc.kotlin.stdlib.validate.ValidatorScope.ValidatableList.values"]},{"name":"var defaultIterator: TreeNodeIterators","description":"com.javiersc.kotlin.stdlib.tree.TreeNode.defaultIterator","location":"kotlin-stdlib/com.javiersc.kotlin.stdlib.tree/-tree-node/default-iterator.html","searchKeys":["defaultIterator","var defaultIterator: TreeNodeIterators","com.javiersc.kotlin.stdlib.tree.TreeNode.defaultIterator"]}]